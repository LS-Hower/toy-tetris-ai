# 2025-04-30  tetris_shape.py


type tuple2d[T] = tuple[tuple[T, ...], ...]
type four_tuple2ds[T] = tuple[tuple2d[T], tuple2d[T], tuple2d[T], tuple2d[T]]


def shape_width(shape: tuple2d[int]) -> int:
    return len(shape[0])

def shape_height(shape: tuple2d[int]) -> int:
    return len(shape)


TETRIS_SHAPES: dict[str, four_tuple2ds[int]] = {
    'I': (
        (
            (1, ),
            (1, ),
            (1, ),
            (1, ),
        ),
        (
            (1, 1, 1, 1),
        ),
        (
            (1, ),
            (1, ),
            (1, ),
            (1, ),
        ),
        (
            (1, 1, 1, 1),
        ),
    ),

    'O': (
        (
            (1, 1),
            (1, 1),
        ),
        (
            (1, 1),
            (1, 1),
        ),
        (
            (1, 1),
            (1, 1),
        ),
        (
            (1, 1),
            (1, 1),
        ),
    ),


    'T': (
        (
            (1, 1, 1),
            (0, 1, 0),
        ),
        (
            (0, 1),
            (1, 1),
            (0, 1),
        ),
        (
            (0, 1, 0),
            (1, 1, 1),
        ),
        (
            (1, 0),
            (1, 1),
            (1, 0),
        ),
    ),

    'S': (
        (
            (0, 1, 1),
            (1, 1, 0),
        ),
        (
            (1, 0),
            (1, 1),
            (0, 1),
        ),
        (
            (0, 1, 1),
            (1, 1, 0),
        ),
        (
            (1, 0),
            (1, 1),
            (0, 1),
        ),
    ),

    'Z': (
        (
            (1, 1, 0),
            (0, 1, 1),
        ),
        (
            (0, 1),
            (1, 1),
            (1, 0),
        ),
        (
            (1, 1, 0),
            (0, 1, 1),
        ),
        (
            (0, 1),
            (1, 1),
            (1, 0),
        ),
    ),

    'L': (
        (
            (1, 0),
            (1, 0),
            (1, 1),
        ),
        (
            (1, 1, 1),
            (1, 0, 0),
        ),
        (
            (1, 1),
            (0, 1),
            (0, 1),
        ),
        (
            (0, 0, 1),
            (1, 1, 1),
        ),
    ),

    'J': (
        (
            (0, 1),
            (0, 1),
            (1, 1),
        ),
        (
            (1, 0, 0),
            (1, 1, 1),
        ),
        (
            (1, 1),
            (1, 0),
            (1, 0),
        ),
        (
            (1, 1, 1),
            (0, 0, 1),
        ),
    )
}
